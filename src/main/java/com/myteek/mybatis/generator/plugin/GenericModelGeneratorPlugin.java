package com.myteek.mybatis.generator.plugin;

import com.myteek.mybatis.constant.Constants;
import com.myteek.mybatis.generator.util.Util;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.internal.util.StringUtility;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import static com.myteek.mybatis.constant.Constants.DEFAULT_PRIMARY_COLUMN_NAME;

public class GenericModelGeneratorPlugin extends PluginAdapter {

    private static final String DEFAULT_PRIMARY_KEY = "id";

    @Override
    public boolean validate(List<String> warnings) {
        String modelTargetPackage = properties.getProperty("modelTargetPackage");
        return StringUtility.stringHasValue(modelTargetPackage);
    }

    @Override
    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        List<IntrospectedColumn> primaryKeyColumns = introspectedTable.getPrimaryKeyColumns();
        if (primaryKeyColumns.size() > 0) {
            if (primaryKeyColumns.size() == 1 &&
                    DEFAULT_PRIMARY_COLUMN_NAME.equals(primaryKeyColumns.get(0).getActualColumnName())) {
                FullyQualifiedJavaType pkType = primaryKeyColumns.get(0).getFullyQualifiedJavaType();
                FullyQualifiedJavaType supperClassType =
                        new FullyQualifiedJavaType(Constants.BASE_PRIMARY_KEY_MODEL_CLASS_PATH);
                topLevelClass.addImportedType(supperClassType);
                supperClassType.addTypeArgument(pkType);
                topLevelClass.setSuperClass(supperClassType);
            } else if (primaryKeyColumns.size() == 1 &&
                    !DEFAULT_PRIMARY_COLUMN_NAME.equals(primaryKeyColumns.get(0).getActualColumnName())) {
                FullyQualifiedJavaType supperClassType =
                        new FullyQualifiedJavaType(Constants.BASE_MODEL_CLASS_PATH);
                topLevelClass.addImportedType(supperClassType);
                topLevelClass.setSuperClass(supperClassType);
            }
            clearPrimaryKeyColumns(topLevelClass, primaryKeyColumns);
        } else {
            FullyQualifiedJavaType supperClassType = new FullyQualifiedJavaType(Constants.BASE_MODEL_CLASS_PATH);
            topLevelClass.addImportedType(supperClassType);
            topLevelClass.setSuperClass(supperClassType);
        }
        topLevelClass.addJavaDocLine("/**");
        topLevelClass.addJavaDocLine(" * Model: " + topLevelClass.getType().getShortName());
        topLevelClass.addJavaDocLine(" * Table: " +
                introspectedTable.getFullyQualifiedTable().getIntrospectedTableName());
        String alias = introspectedTable.getFullyQualifiedTable().getAlias();
        if (alias != null) {
            topLevelClass.addJavaDocLine(" * Alias: " + alias);
        }
        topLevelClass.addJavaDocLine(" * This Model generated by MyBatis generator Extend.");
        topLevelClass.addJavaDocLine(" */");
        return super.modelBaseRecordClassGenerated(topLevelClass, introspectedTable);
    }

    /**
     * 去除子类中主键属性
     * @param topLevelClass top level class
     * @param primaryKeyColumns primary key columns
     */
    private void clearPrimaryKeyColumns(TopLevelClass topLevelClass, List<IntrospectedColumn> primaryKeyColumns) {
        if (primaryKeyColumns.isEmpty()) {
            return;
        }
        List<Field> fields = topLevelClass.getFields();
        Iterator<Field> fieldIterator = fields.iterator();
        HashSet<Field> pkFields = new HashSet<>();
        List<Method> methods = topLevelClass.getMethods();
        Iterator<Method> methodIterator = methods.iterator();
        HashSet<Method> pkMethods = new HashSet<>();

        while (fieldIterator.hasNext()) {
            Field field = fieldIterator.next();
            for (IntrospectedColumn column : primaryKeyColumns) {
                String pkName = column.getJavaProperty();
                if (field.getName().equals(pkName) && DEFAULT_PRIMARY_KEY.equals(pkName)) {
                    pkFields.add(field);
                }
            }
        }
        fields.removeAll(pkFields);

        while (methodIterator.hasNext()) {
            Method method = methodIterator.next();
            for (IntrospectedColumn column : primaryKeyColumns) {
                String pkName = column.getJavaProperty();
                if (DEFAULT_PRIMARY_KEY.equals(pkName)) {
                    String setter = "set" + Util.convertFieldName(pkName);
                    String getter = "get" + Util.convertFieldName(pkName);
                    if (method.getName().equals(setter) || method.getName().equals(getter)) {
                        pkMethods.add(method);
                    }
                }
            }
        }
        methods.removeAll(pkMethods);
    }

    @Override
    public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        List<IntrospectedColumn> primaryKeyColumns = introspectedTable.getPrimaryKeyColumns();
        if (!primaryKeyColumns.isEmpty() && !(primaryKeyColumns.size() == 1 &&
                DEFAULT_PRIMARY_COLUMN_NAME.equals(primaryKeyColumns.get(0).getActualColumnName()))) {
            FullyQualifiedJavaType superClassType =
                    new FullyQualifiedJavaType(Constants.BASE_MODEL_CLASS_PATH);
            topLevelClass.addImportedType(superClassType);
            topLevelClass.setSuperClass(superClassType);
        }
        topLevelClass.addJavaDocLine("/**");
        topLevelClass.addJavaDocLine(" * Primary: " + topLevelClass.getType().getShortName());
        topLevelClass.addJavaDocLine(" * Table: " +
                introspectedTable.getFullyQualifiedTable().getIntrospectedTableName());
        String alias = introspectedTable.getFullyQualifiedTable().getAlias();
        if (alias != null) {
            topLevelClass.addJavaDocLine(" * Alias: " +  alias);
        }
        topLevelClass.addJavaDocLine(" * This PrimaryKey generated by Mybatis Generator Extend.");
        topLevelClass.addJavaDocLine(" */");
        return super.modelPrimaryKeyClassGenerated(topLevelClass, introspectedTable);
    }

}
